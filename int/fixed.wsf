# Copyright (c) 2021 Andrew Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# and_u1 returns the bitwise AND of x and y for 1-bit unsigned integers.
# (x y -- x&y)
and_u1:
    # x%2 * y%2
    swap 2% swap 2% * ret

# or_u1 returns the bitwise OR of x and y for 1-bit unsigned integers.
# (x y -- x|y)
or_u1:
    # 1 - ((1 - x%2) * (1 - y%2))
    swap 1 swap 2% -
    swap 1 swap 2% - *
    1 swap - ret

# xor_u1 returns the bitwise XOR of x and y for 1-bit unsigned integers.
# (x y -- x&y)
xor_u1:
    # (x%2 + y%2) % 2
    swap 2% swap 2% + 2% ret

# andnot_u1 returns the bitwise AND NOT of x and y for 1-bit unsigned
# integers.
# (x y -- x&y)
andnot_u1:
    # x%2 * (1 - y%2)
    swap 2% swap 1 swap 2% - * ret

# and_u8 returns the bitwise AND of x and y for 8-bit unsigned integers.
# (x y -- x&y)
and_u8:
    # zi = xi * yi
    ^1      2% ^1      2% *
    ^2   2/ 2% ^2   2/ 2% *   2* +
    ^2   4/ 2% ^2   4/ 2% *   4* +
    ^2   8/ 2% ^2   8/ 2% *   8* +
    ^2  16/ 2% ^2  16/ 2% *  16* +
    ^2  32/ 2% ^2  32/ 2% *  32* +
    ^2  64/ 2% ^2  64/ 2% *  64* +
    ^2 128/ 2% ^2 128/ 2% * 128* +
    2slide ret

# or_u8 returns the bitwise OR of x and y for 8-bit unsigned integers.
# (x y -- x|y)
or_u8:
    # zi = 1 - ((1 - xi) * (1 - yi))
    1 ^ ^3      2% - 1 ^3      2% - * -
    1 ^ ^4   2/ 2% - 1 ^4   2/ 2% - * -   2* +
    1 ^ ^4   4/ 2% - 1 ^4   4/ 2% - * -   4* +
    1 ^ ^4   8/ 2% - 1 ^4   8/ 2% - * -   8* +
    1 ^ ^4  16/ 2% - 1 ^4  16/ 2% - * -  16* +
    1 ^ ^4  32/ 2% - 1 ^4  32/ 2% - * -  32* +
    1 ^ ^4  64/ 2% - 1 ^4  64/ 2% - * -  64* +
    1 ^ ^4 128/ 2% - 1 ^4 128/ 2% - * - 128* +
    2slide ret

# xor_u8 returns the bitwise XOR of x and y for 8-bit unsigned integers.
# (x y -- x&y)
xor_u8:
    # zi = (xi + yi) % 2
    ^1      2% ^1      2% + 2%
    ^2   2/ 2% ^2   2/ 2% + 2%   2* +
    ^2   4/ 2% ^2   4/ 2% + 2%   4* +
    ^2   8/ 2% ^2   8/ 2% + 2%   8* +
    ^2  16/ 2% ^2  16/ 2% + 2%  16* +
    ^2  32/ 2% ^2  32/ 2% + 2%  32* +
    ^2  64/ 2% ^2  64/ 2% + 2%  64* +
    ^2 128/ 2% ^2 128/ 2% + 2% 128* +
    2slide ret

# andnot_u8 returns the bitwise AND NOT of x and y for 8-bit unsigned
# integers.
# (x y -- x&y)
andnot_u8:
    # zi = xi * (1 - yi)
    ^1      2% 1 ^2      2% - *
    ^2   2/ 2% 1 ^3   2/ 2% - *   2* +
    ^2   4/ 2% 1 ^3   4/ 2% - *   4* +
    ^2   8/ 2% 1 ^3   8/ 2% - *   8* +
    ^2  16/ 2% 1 ^3  16/ 2% - *  16* +
    ^2  32/ 2% 1 ^3  32/ 2% - *  32* +
    ^2  64/ 2% 1 ^3  64/ 2% - *  64* +
    ^2 128/ 2% 1 ^3 128/ 2% - * 128* +
    2slide ret

# pop_count_u8 returns the population count of x, an 8-bit unsigned
# integer.
# (x -- n)
pop_count_u8:
    ^       2%
    ^1   2/ 2% +
    ^1   4/ 2% +
    ^1   8/ 2% +
    ^1  16/ 2% +
    ^1  32/ 2% +
    ^1  64/ 2% +
    ^1 128/ 2% +
    1slide ret

# cast_i8 casts an arbitrary-precision integer to the range of an 8-bit
# signed integer.
# (x -- i8)
cast_i8:
    128+ 256% 128- ret

# cast_i16 casts an arbitrary-precision integer to the range of a 16-bit
# signed integer.
# (x -- i16)
cast_i16:
    32768+ 65536% 32768- ret

# cast_i32 casts an arbitrary-precision integer to the range of a 32-bit
# signed integer.
# (x -- i32)
cast_i32:
    2147483648+ 4294967296% 2147483648- ret

# cast_i64 casts an arbitrary-precision integer to the range of a 64-bit
# signed integer.
# (x -- i64)
cast_i64:
    9223372036854775808+ 18446744073709551616% 9223372036854775808- ret

# cast_u1 casts an arbitrary-precision integer to the range of a 1-bit
# unsigned integer.
cast_u1:
    2% ret

# cast_u8 casts an arbitrary-precision integer to the range of an 8-bit
# unsigned integer.
# (x -- u8)
cast_u8:
    256% ret

# cast_u16 casts an arbitrary-precision integer to the range of a 16-bit
# unsigned integer.
# (x -- u16)
cast_u16:
    65536% ret

# cast_u32 casts an arbitrary-precision integer to the range of a 32-bit
# unsigned integer.
# (x -- u32)
cast_u32:
    4294967296% ret

# cast_u64 casts an arbitrary-precision integer to the range of a 64-bit
# unsigned integer.
# (x -- u64)
cast_u64:
    18446744073709551616% ret

# and_u16 returns the bitwise AND of x and y for 16-bit unsigned
# integers.
# (x y -- x&y)
and_u16:
    ^ call and_u8 swap 256/ call and_u8 256* + ret

# and_u32 returns the bitwise AND of x and y for 32-bit unsigned
# integers.
# (x y -- x&y)
and_u32:
    ^ call and_u16 swap 65536/ call and_u16 65536* + ret

# and_u64 returns the bitwise AND of x and y for 64-bit unsigned
# integers.
# (x y -- x&y)
and_u64:
    ^ call and_u32 swap 4294967296/ call and_u32 4294967296* + ret

# or_u16 returns the bitwise OR of x and y for 16-bit unsigned integers.
# (x y -- x|y)
or_u16:
    ^ call or_u8 swap 256/ call or_u8 256* + ret

# or_u32 returns the bitwise OR of x and y for 32-bit unsigned integers.
# (x y -- x|y)
or_u32:
    ^ call or_u16 swap 65536/ call or_u16 65536* + ret

# or_u64 returns the bitwise OR of x and y for 64-bit unsigned integers.
# (x y -- x|y)
or_u64:
    ^ call or_u32 swap 4294967296/ call or_u32 4294967296* + ret

# xor_u16 returns the bitwise XOR of x and y for 16-bit unsigned
# integers.
# (x y -- x^y)
xor_u16:
    ^ call xor_u8 swap 256/ call xor_u8 256* + ret

# xor_u32 returns the bitwise XOR of x and y for 32-bit unsigned
# integers.
# (x y -- x^y)
xor_u32:
    ^ call xor_u16 swap 65536/ call xor_u16 65536* + ret

# xor_u64 returns the bitwise XOR of x and y for 64-bit unsigned
# integers.
# (x y -- x^y)
xor_u64:
    ^ call xor_u32 swap 4294967296/ call xor_u32 4294967296* + ret

# andnot_u16 returns the bitwise AND NOT of x and y for 16-bit unsigned
# integers.
# (x y -- x&^y)
andnot_u16:
    ^ call andnot_u8 swap 256/ call andnot_u8 256* + ret

# andnot_u32 returns the bitwise AND NOT of x and y for 32-bit unsigned
# integers.
# (x y -- x&^y)
andnot_u32:
    ^ call andnot_u16 swap 65536/ call andnot_u16 65536* + ret

# andnot_u64 returns the bitwise AND NOT of x and y for 64-bit unsigned
# integers.
# (x y -- x&^y)
andnot_u64:
    ^ call andnot_u32 swap 4294967296/ call andnot_u32 4294967296* + ret

# pop_count_u16 returns the population count of x, a 16-bit unsigned
# integer.
# (x -- n)
pop_count_u16:
    ^ call pop_count_u8 swap 256/ call pop_count_u8 + ret

# pop_count_u32 returns the population count of x, a 32-bit unsigned
# integer.
# (x -- n)
pop_count_u32:
    ^ call pop_count_u16 swap 65536/ call pop_count_u16 + ret

# pop_count_u64 returns the population count of x, a 64-bit unsigned
# integer.
# (x -- n)
pop_count_u64:
    ^ call pop_count_u32 swap 4294967296/ call pop_count_u32 + ret
