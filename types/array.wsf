# Copyright (c) 2021 Andrew Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# count returns the number of occurrences of x in the array.
# (addr len x -- count)
count:
    swap 0 ^
    ^2 1- jn .count_ret
.count_loop:
    ^1 ^5 + retrieve ^4 j= .count_equal
.count_loop_next:
    swap 1+ swap
    ^1 ^3 j< .count_loop
.count_ret:
    4slide ret
.count_equal:
    1+ jmp .count_loop_next

# contains returns whether x is contained within the array.
# (addr len x -- ?)
contains:
    swap 0
    ^1 1- jn .contains_false
.contains_loop:
    ^ ^4 + retrieve ^3 j= .contains_true
.contains_loop_next:
    1+
    ^ ^2 j< .contains_loop
.contains_false:
    0 4slide ret
.contains_true:
    1 4slide ret

# print prints an array, delimited by the given char.
# (addr len delim -- )
print:
    swap 1- 0
    ^1 jn .print_ret
.print_loop:
    ^ ^4 + retrieve printi
    1+
    2dup j< .print_ret
    ^2 printc
    jmp .print_loop
.print_ret:
    4drop ret

# read_eof reads integers, one per line, until EOF, stores them on the
# heap starting at addr terminated with -1, and returns the length.
# (addr -- len)
read_eof:
    ^
.read_eof_loop:
    ^ ^ readi retrieve
    jeof .read_eof_heap_ret
    1+
    jmp .read_eof_loop
.read_eof_heap_ret:
    ^ -1 store # overwrite 0 with -1
    swap - ret
