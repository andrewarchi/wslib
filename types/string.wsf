# Copyright (c) 2021 Andrew Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# print prints a string on the heap at addr, with the given length.
# (addr len -- )
print:
    1-
    ^ jn .print_ret
    swap ^ retrieve printc 1+ swap
    jmp print
.print_ret:
    2drop ret

# print_0 prints a string on the heap at addr, terminated with 0.
# (addr -- )
print_0:
    ^ retrieve
    ^ jz .print_0_ret
    printc 1+
    jmp print_0
.print_0_ret:
    2drop ret

# print_neg prints a string on the heap at addr, terminated with a
# negative number.
# (addr -- )
print_neg:
    ^ retrieve
    ^ jn .print_neg_ret
    printc 1+
    jmp print_neg
.print_neg_ret:
    2drop ret

# print_stack prints a string on the stack, prefixed with the length.
# (str... len -- )
print_stack:
    1-
    ^ jn .print_stack_ret
    swap printc
    jmp print_stack
.print_stack_ret:
    drop ret

# print_0_stack prints a string on the stack, terminated with 0.
# (0 str... -- )
print_0_stack:
    ^ jz .print_0_stack_ret
    printc
    jmp print_0_stack
.print_0_stack_ret:
    drop ret

# print_neg_stack prints a string on the stack, terminated with a
# negative number.
# (-1 str... -- )
print_neg_stack:
    ^ jn .print_neg_stack_ret
    printc
    jmp print_neg_stack
.print_neg_stack_ret:
    drop ret

# read reads len chars and stores it on the heap starting at addr.
# (addr len -- )
read:
    ^1 1- + swap
.read_loop:
    2dup j< .read_ret
    ^ readc
    1+
    jmp .read_loop
.read_ret:
    2drop ret

# read_line reads a line of text (or until EOF), stores it on the heap
# starting at addr terminated with -1, and returns the length (not
# including '\n').
# (addr -- len)
read_line:
    '\n' # fallthrough

# read_until reads text until the delimiter (or EOF), stores it on the
# heap starting at addr terminated with -1, and returns the length (not
# including the delimiter).
# (addr delim -- len)
read_until:
    ^1
.read_until_loop:
    ^ ^ readc retrieve
    ^ ^3 j= .read_until_ret
    ^ jeof .read_until_ret
    drop 1+
    jmp .read_until_loop
.read_until_ret:
    drop swap drop
    ^ -1 store # overwrite delim with -1
    swap - ret

# read_eof reads text until EOF, stores it on the heap starting at addr
# terminated with -1, and returns the length.
# (addr -- len)
read_eof:
    ^
.read_eof_loop:
    ^ ^ readc retrieve
    jeof .read_eof_ret
    1+
    jmp .read_eof_loop
.read_eof_ret:
    ^ -1 store # overwrite 0 with -1
    swap - ret
