# Copyright (c) 2021 Andrew Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# transpose transposes a matrix with m rows and n columns in-place,
# stored at addr on the heap in row-major order.
# (addr m n -- )
transpose:
    ^1 ^1 j= .transpose_m_eq_n
    # TODO
    3drop ret
.transpose_m_eq_n:
    drop jmp transpose_square

# transpose_square transposes a matrix with size n in-place, stored at
# addr on the heap.
# Requires n>=0
# (addr n -- )
transpose_square:
    # for i in n-1..=0
    #   for j := i-1..=0
    #     A[i][j], A[j][i] = A[j][i], A[i][j]
    dup dup
.transpose_square_row:
    drop
    1 -
    ^ jn .transpose_square_ret
    dup
.transpose_square_col:
    1 -
    ^ jn .transpose_square_row
    ^3 ^2 + ^3 ^2 * +  # addr + j + n*i
    ^3 ^1 + ^3 ^3 * +  # addr + i + n*j
    ^ retrieve
    ^1 ^3 retrieve store
    1slide store
    jmp .transpose_square_col
.transpose_square_ret:
    4drop ret

# (addr m n -- )
print_matrix:
    ^2 ^2
.print_matrix_row:
    ^ jz .print_matrix_ret
    swap
    ^ call print_vector
    '\n' printc
    ^2 + swap
    jmp .print_matrix_row
.print_matrix_ret:
    5drop ret

# (addr n -- )
print_vector:
    1 -
    ^ jn .print_vector_ret
    swap 1 + ^ retrieve printi swap
    ^ jz .print_vector_ret
    ' ' printc
    jmp print_vector
.print_vector_ret:
    2drop ret
