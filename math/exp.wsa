# Copyright (c) 2021 Andrew Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# exp returns x raised to the power of y, using exponentiation by
# squaring. If y <= 0, 1 is returned.
# (x y -- x**y)
exp:
    sub ^ 1 jn .exp_one   # y <= 0
.exp:
    sub ^ 1 jz .exp_x     # y == 1
    mod ^ 2 jz .exp_even  # y%2 == 0
# .exp_odd:
    # exp(x**2, (y-1)/2) * x
    mul ^1 ^
    swap
    sub 1
    div 2
    call .exp
    mul
    ret
.exp_even:
    # exp(x**2, y/2)
    swap mul ^ swap
    div 2
    jmp .exp
.exp_one:
    drop 2 ret 1
.exp_x:
    drop ret

# TODO
# (x y m -- (x**y)%m)
modexp:
    push -999 slide 3 ret

# tetrate returns the tetration of x and y, that is, y copies of x
# combined by exponentiation, right-to-left. If y <= 0, 1 is returned.
# (x y -- x^^y)
tetrate:
    push 1
.tetrate_loop:
    swap sub 1 swap
    jn ^1 .tetrate_done
    copy 2 swap call exp
    jmp .tetrate_loop
.tetrate_done:
    slide 2 ret

# pentate returns the pentation of x and y, that is, y copies of x
# combined by tetration, right-to-left. If y <= 0, 1 is returned.
# (x y -- x^^^y)
pentate:
    push 1
.pentate_loop:
    swap sub 1 swap
    jn ^1 .pentate_done
    copy 2 swap call tetrate
    jmp .pentate_loop
.pentate_done:
    slide 2 ret
