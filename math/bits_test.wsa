# Copyright (c) 2021 Andrew Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Bitwise tests borrowed from Go
# https://golang.org/src/math/big/int_test.go#L1193

push 0      push 0      call test_bitwise
push 0      push 1      call test_bitwise
push 1      push 0      call test_bitwise
push -1     push 0      call test_bitwise
push -175   push -80    call test_bitwise
push 0      push -1     call test_bitwise
push 1      push 1      call test_bitwise
push -1     push -1     call test_bitwise
push 7      push 8      call test_bitwise
push 5      push 15     call test_bitwise
push 255    push -10    call test_bitwise
push 81910  push 39502  call test_bitwise
push -81910 push 39502  call test_bitwise
push -81910 push -39502 call test_bitwise

push 340282566926938463463474637401768211457
push 298472983472983471903246121093472394872319615612417471234712061
call test_bitwise

push 340282566926938463463474637401768211457
push -298472983472983471903246121093472394872319615612417471234712061
call test_bitwise

push -340282566926938463463474637401768211457
push -298472983472983471903246121093472394872319615612417471234712061
call test_bitwise

push 0      call test_not
push 1      call test_not
push 7      call test_not
push 0      call test_not
push -81910 call test_not
push 298472983472983471903246121093472394872319615612417471234712061 call test_not

end

# (x y -- )
test_bitwise:
    printc 'x' printc ' ' printi ^1 printc '\n'
    printc 'y' printc ' ' printi ^ printc '\n'

    printc 'x' printc '&' printc 'y' printc ' '
    copy 1 copy 1 call and printi printc '\n'

    printc 'x' printc '|' printc 'y' printc ' '
    copy 1 copy 1 call or printi printc '\n'

    printc 'x' printc '^' printc 'y' printc ' '
    copy 1 copy 1 call xor printi printc '\n'

    printc 'x' printc '&' printc '^' printc 'y' printc ' '
    copy 1 copy 1 call andnot printi printc '\n'

    printc '\n'

    drop drop
    ret

# (x -- )
test_not:
    printc 'x' printc ' ' printi ^ printc '\n'
    printc '-' printc 'x' printc ' '
    call not printi printc '\n' printc '\n'
    ret
