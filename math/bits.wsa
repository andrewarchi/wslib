# Copyright (c) 2021 Andrew Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Negative operand handling borrowed from Go
# https://golang.org/src/math/big/int.go#L1072

# x y -- x&y
and:
    jn ^1 .and_xneg
    jn ^ .and_yneg
    jmp uand
.and_xneg:
    jn ^ .and_xyneg
    # & is symmetric
    swap
.and_yneg:
    # x & (-y)
    # == x & ^(y-1)
    # == x &^ (y-1)
    mul -1 sub 1
    jmp uandnot
.and_xyneg:
    # (-x) & (-y)
    # == ^(x-1) & ^(y-1)
    # == ^((x-1) | (y-1))
    # == -(((x-1) | (y-1)) + 1)
    mul -1 sub 1
    swap
    mul -1 sub 1
    call uor
    add 1 mul -1
    ret

# x y -- x|y
or:
    jn ^1 .or_xneg
    jn ^ .or_yneg
    jmp uor
.or_xneg:
    jn ^ .or_xyneg
    # | is symmetric
    swap
.or_yneg:
	# x | (-y)
    # == x | ^(y-1)
    # == ^((y-1) &^ x)
    # == -(^((y-1) &^ x) + 1)
    mul -1 sub 1
    swap call uandnot
    add 1 mul -1
    ret
.or_xyneg:
    # (-x) | (-y)
    # == ^(x-1) | ^(y-1)
    # == ^((x-1) & (y-1))
    # == -(((x-1) & (y-1)) + 1)
    mul -1 sub 1
    swap
    mul -1 sub 1
    call uand
    add 1 mul -1
    ret

# x y -- x^y
xor:
    jn ^1 .xor_xneg
    jn ^ .xor_yneg
    jmp uxor
.xor_xneg:
    jn ^ .xor_xyneg
    # ^ is symmetric
    swap
.xor_yneg:
    # x ^ (-y)
    # == x ^ ^(y-1)
    # == ^(x ^ (y-1))
    # == -((x ^ (y-1)) + 1)
    mul -1 sub 1
    call uxor
    add 1 mul -1
    ret
.xor_xyneg:
    # (-x) ^ (-y)
    # == ^(x-1) ^ ^(y-1)
    # == (x-1) ^ (y-1)
    mul -1 sub 1
    swap
    mul -1 sub 1
    call uxor
    ret

# x y -- x&^y
andnot:
    jn ^1 .andnot_xneg
    jn ^ .andnot_yneg
    jmp uandnot
.andnot_xneg:
    jn ^ .andnot_xyneg
    # (-x) &^ y
    # == ^(x-1) &^ y
    # == ^(x-1) & ^y
    # == ^((x-1) | y)
    # == -(((x-1) | y) + 1)
    swap mul -1 sub 1
    call uor
    add 1 mul -1
    ret
.andnot_yneg:
	# x &^ (-y)
    # == x &^ ^(y-1)
    # == x & (y-1)
    mul -1 sub 1
    jmp uand
.andnot_xyneg:
    # (-x) &^ (-y)
    # == ^(x-1) &^ ^(y-1)
    # == ^(x-1) & (y-1)
    # == (y-1) &^ (x-1)
    mul -1 sub 1
    swap
    mul -1 sub 1
    call uandnot
    ret

# x y -- x&y
# requires x>=0 && y>=0
uand:
    # i, z
    push 1
    push 0
.uand_loop:
    add ^3 ^3 jz .uand_ret

    # z += (x%2 + y%2)/2 * i
    mod ^3 2
    mod ^3 2
    add div 2
    mul ^2
    add

    # x/2, y/2, i*2, z
    div ^3 2
    div ^3 2
    mul ^3 2
    copy 3
    call .uand_loop

    slide 1
.uand_ret:
    slide 3
    ret

# x y -- x|y
# requires x>=0 && y>=0
uor:
    # i, z
    push 1
    push 0
.uor_loop:
    add ^3 ^3 jz .uor_ret

    # z += (x%2 + y%2 - (x%2 * y%2)) * i
    mod ^3 2
    mod ^3 2
    mul ^1 ^1
    sub add
    mul ^2
    add

    # x/2, y/2, i*2, z
    div ^3 2
    div ^3 2
    mul ^3 2
    copy 3
    call .uor_loop

    slide 1
.uor_ret:
    slide 3
    ret

# x y -- x^y
# requires x>=0 && y>=0
uxor:
    # i, z
    push 1
    push 0
.uxor_loop:
    add ^3 ^3 jz .uxor_ret

    # z += (x%2 + y%2)%2 * i
    mod ^3 2
    mod ^3 2
    add mod 2
    mul ^2
    add

    # x/2, y/2, i*2, z
    div ^3 2
    div ^3 2
    mul ^3 2
    copy 3
    call .uxor_loop

    slide 1
.uxor_ret:
    slide 3
    ret

# x y -- x&^y
# requires x>=0 && y>=0
uandnot:
    # i, z
    push 1
    push 0
.uandnot_loop:
    add ^3 ^3 jz .uandnot_ret

    # z += (x%2 * (1 - y%2)) * i
    mod ^3 2
    push 1 mod ^4 2 sub
    mul
    mul ^2
    add

    # x/2, y/2, i*2, z
    div ^3 2
    div ^3 2
    mul ^3 2
    copy 3
    call .uandnot_loop

    slide 1
.uandnot_ret:
    slide 3
    ret

# x -- -x
not:
    add 1 mul -1
    ret
