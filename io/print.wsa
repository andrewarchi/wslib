# Copyright (c) 2021 Andrew Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# printf prints a string on the stack with format verbs, stopping at -1.
#
# The format verbs are defined as follows:
#   -1 =>     end of string
#   -2 => %d  decimal
#   -3 => %b  binary
#   -4 => %o  octal
#   -5 => %x  hexadecimal
#   -6 => %#b binary with leading 0b
#   -7 => %#o octal with leading 0o
#   -8 => %#x hexadecimal with leading 0x
#   -9 => %s  string
#
# (-1 str... -- )
printf:
    jn ^ .printf_verb
    printc
    jmp printf
.printf_verb:
    add 1 jz ^ .printf_ret         # -1
    add 1 jz ^ .printf_d           # -2
    add 1 jz ^ .printf_b           # -3
    add 1 jz ^ .printf_o           # -4
    add 1 jz ^ .printf_x           # -5
    add 1 jz ^ .printf_b_prefixed  # -6
    add 1 jz ^ .printf_o_prefixed  # -7
    add 1 jz ^ .printf_x_prefixed  # -8
    add 1 jz ^ .printf_s           # -9
    # fallthrough
.printf_ret:
    drop ret
.printf_d:
    drop printi jmp printf
.printf_b:
    drop call 2 printi_base jmp printf
.printf_o:
    drop call 8 printi_base jmp printf
.printf_x:
    drop call 16 printi_base jmp printf
.printf_b_prefixed:
    drop call 2 printi_base_prefixed jmp printf
.printf_o_prefixed:
    drop call 8 printi_base_prefixed jmp printf
.printf_x_prefixed:
    drop call 16 printi_base_prefixed jmp printf
.printf_s:
    drop call printf jmp printf

# prints0 prints a string on the stack, stopping at 0.
# (0 str... -- )
prints0:
    jz ^ .prints0_eof
    printc
    jmp prints0
.prints0_eof:
    drop ret

# Requires 2<=base<=36
# (x base -- )
printi_base:
    swap
    call .print_sign
.printu_base:
    call ^ ^2 .next_pow
    sub ^1 11 jn .printu_base10
    jmp .printu_base36

# Requires 2<=base<=36
# (x base -- )
printi_base_prefixed:
    swap
    call .print_sign
    call ^1 .print_base_prefix
    jmp .printu_base

# (x -- |x|)
.print_sign:
    jn ^ .print_sign_neg
    ret
.print_sign_neg:
    mul -1
    printc '-'
    ret

# (base -- )
.print_base_prefix:
    sub ^ 2 jz .print_base_2_prefix
    sub ^ 8 jz .print_base_8_prefix
    sub ^ 16 jz .print_base_16_prefix
    drop
    ret
.print_base_2_prefix:
    push 'b'
    jmp .print_base_prefix_ret
.print_base_8_prefix:
    push 'o'
    jmp .print_base_prefix_ret
.print_base_16_prefix:
    push 'x'
.print_base_prefix_ret:
    printc '0' printc
    drop
    ret

# .next_pow returns the next power of base greater than or equal to x.
# Requires x>=0 && base>=2
# (x base -- pow)
.next_pow:
    swap
    copy 1
.next_pow_loop:
    swap
    div ^2
    jz ^ .next_pow_ret
    swap
    mul ^2
    jmp .next_pow_loop
.next_pow_ret:
    drop swap drop
    ret

# Requires 2<=base<=10 && 0<=x<=pow
# (base x pow -- )
.printu_base10:
    # pow /= base
    div ^2
    jz ^ .printu_base10_ret
    # print x/pow % base
    div ^1 ^1 mod ^3 printi
    jmp .printu_base10
.printu_base10_ret:
    drop drop drop
    ret

# Requires 2<=base<=36 && 0<=x<=pow
# (base x pow -- )
.printu_base36:
    # pow /= base
    div ^2
    jz ^ .printu_base36_ret
    div ^1 ^1 mod ^3
    sub ^ 10 jn .printu_base36_10
    # print (x/pow % base) - 10 + 'a'
    add 87 printc
    jmp .printu_base36
.printu_base36_10:
    # print x/pow % base
    printi
    jmp .printu_base36
.printu_base36_ret:
    drop drop drop
    ret
