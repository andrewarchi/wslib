# Copyright (c) 2021 Andrew Archibald
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# printf prints a string on the stack with format verbs, stopping at -1.
#
# The format verbs are defined as follows:
#
#      -1  =>      end of string
#    x -2  => %d   decimal
#    x -3  => %b   binary
#    x -4  => %o   octal
#    x -5  => %x   hexadecimal
#    x -6  => %#b  binary with 0b prefix
#    x -7  => %#o  octal with 0o prefix
#    x -8  => %#x  hexadecimal with 0x prefix
#  x w -9  => %0wb binary with 0 padding
#  x w -10 => %0wo octal with 0 padding
#  x w -11 => %0wx hexadecimal with 0 padding
#  x w -12 => %wb  binary with space padding
#  x w -13 => %wo  octal with space padding
#  x w -14 => %wx  hexadecimal with space padding
#    c -15 => %q   quoted char
# s... -16 => %s   string
#
# (-1 str... -- )
printf:
    ^ jn .printf_verb
    printc
    jmp printf
.printf_verb:
    1+ ^ jz .printf_ret        # -1
    1+ ^ jz .printf_d          # -2
    1+ ^ jz .printf_b          # -3
    1+ ^ jz .printf_o          # -4
    1+ ^ jz .printf_x          # -5
    1+ ^ jz .printf_b_prefixed # -6
    1+ ^ jz .printf_o_prefixed # -7
    1+ ^ jz .printf_x_prefixed # -8
    1+ ^ jz .printf_b_pad_0    # -9
    1+ ^ jz .printf_o_pad_0    # -10
    1+ ^ jz .printf_x_pad_0    # -11
    1+ ^ jz .printf_b_pad_s    # -12
    1+ ^ jz .printf_o_pad_s    # -13
    1+ ^ jz .printf_x_pad_s    # -14
    1+ ^ jz .printf_q          # -15
    1+ ^ jz .printf_s          # -16
    '!' printc
    # fallthrough
.printf_ret:
    drop ret
.printf_d:
    drop printi jmp printf
.printf_b:
    drop 2 call printi_base jmp printf
.printf_o:
    drop 8 call printi_base jmp printf
.printf_x:
    drop 16 call printi_base jmp printf
.printf_b_prefixed:
    drop 2 call printi_base_prefixed jmp printf
.printf_o_prefixed:
    drop 8 call printi_base_prefixed jmp printf
.printf_x_prefixed:
    drop 16 call printi_base_prefixed jmp printf
.printf_b_pad_0:
    2 jmp .printf_pad_0
.printf_o_pad_0:
    8 jmp .printf_pad_0
.printf_x_pad_0:
    16 jmp .printf_pad_0
.printf_b_pad_s:
    2 jmp .printf_pad_s
.printf_o_pad_s:
    8 jmp .printf_pad_s
.printf_x_pad_s:
    16 jmp .printf_pad_s
.printf_q:
    drop call printc_quote jmp printf
.printf_s:
    drop call printf jmp printf
.printf_pad_0:
    1slide swap ^2 swap # (x w verb base -- x base x w)
    call printi_base_pad_0
    drop
    jmp printf
.printf_pad_s:
    1slide swap ^2 swap # (x w verb base -- x base x w)
    call printi_base_pad_s
    drop
    jmp printf

# prints0 prints a string on the stack, terminated with 0.
# (0 str... -- )
prints0:
    ^ jz .prints0_eof
    printc
    jmp prints0
.prints0_eof:
    drop ret

# prints_len prints a string on the stack, prefixed with the length.
# (str... len -- )
prints_len:
    1-
    ^ jn .prints_len_done
    swap printc
    jmp prints_len
.prints_len_done:
    drop ret

# prints_len_heap prints a string on the heap at addr, with the given
# length.
# (addr len -- )
prints_len_heap:
    1-
    ^ jn .prints_len_heap_done
    swap ^ retrieve printc 1+ swap
    jmp prints_len_heap
.prints_len_heap_done:
    2drop ret

# printc_quote prints a quoted character with escape sequences for
# ASCII control characters.
# (c -- )
printc_quote:
    '\'' printc
    call printc_escape
    '\'' printc
    ret

# printc_escape prints a character with escape sequences for ASCII
# control characters.
# (c -- )
printc_escape:
    ^ ' '  j< .printc_escape_control
    ^ '\'' j= .printc_escape_slash
    ^ '\\' j= .printc_escape_slash
.printc_escape_ret:
    printc
    ret
.printc_escape_slash:
    '\\' printc
    jmp .printc_escape_ret
.printc_escape_control:
    '\\' printc
    ^ '\a' j= .printc_escape_a
    ^ '\b' j= .printc_escape_b
    ^ '\t' j= .printc_escape_t
    ^ '\n' j= .printc_escape_n
    ^ '\v' j= .printc_escape_v
    ^ '\f' j= .printc_escape_f
    ^ '\r' j= .printc_escape_r
    ^ '\e' j= .printc_escape_e
    'x' printc
    16 swap 2
    call printi_base_pad_0
    ret
.printc_escape_a:
    'a' jmp .printc_escape_ret
.printc_escape_b:
    'b' jmp .printc_escape_ret
.printc_escape_t:
    't' jmp .printc_escape_ret
.printc_escape_n:
    'n' jmp .printc_escape_ret
.printc_escape_v:
    'v' jmp .printc_escape_ret
.printc_escape_f:
    'f' jmp .printc_escape_ret
.printc_escape_r:
    'r' jmp .printc_escape_ret
.printc_escape_e:
    'e' jmp .printc_escape_ret
